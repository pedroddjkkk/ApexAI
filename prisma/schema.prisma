generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @unique
  username       String
  email          String          @unique
  auth_session   Session[]
  key            Key[]
  ai_config      AIConfig[]
  whatsappClient WhatsappClient?
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

// banco AI config 

model AIConfig {
  id                String          @id @default(uuid())
  user              User            @relation(references: [id], fields: [user_id], onDelete: Cascade)
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  user_id           String
  name              String
  sistema           String          @db.VarChar(3000)
  faq               String          @db.VarChar(3000)
  max_tokens        Int
  model             String
  temperature       Float
  stop              String
  top_p             Float
  frequency_penalty Float
  presence_penalty  Float
  WhatsappClient    WhatsappClient?
}

model WhatsappClient {
  id           Int      @id @default(autoincrement())
  name         String
  active       Boolean  @default(true)
  qrCode       String?  @db.MediumText()
  ready        Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  user_id      String   @unique
  user         User     @relation(references: [id], fields: [user_id])
  ai_config    AIConfig @relation(fields: [ai_config_id], references: [id])
  ai_config_id String   @unique
}
