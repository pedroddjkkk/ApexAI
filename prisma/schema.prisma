generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String              @id @unique
  company_id   String?
  username     String
  role_id      String?
  email        String              @unique
  role         Role?               @relation(fields: [role_id], references: [id])
  company      Company?            @relation(fields: [company_id], references: [id])
  auth_session Session[]
  key          Key[]
  ai_config    AIConfig[]
  bot_config   BotWhatsappConfig[]
  companys     Company[]           @relation(name: "UserCompany")
}

model Role {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  users     User[]
  views     Views[]
}

model Views {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(references: [id], fields: [role_id], onDelete: Cascade)
  role_id   String
  name      String
  create    Boolean
  edit      Boolean
  delete    Boolean
  view      Boolean
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

// banco AI config 

model AIConfig {
  id                String   @id @default(uuid())
  user              User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user_id           String
  name              String
  sistema           String   @db.VarChar(3000)
  max_tokens        Int
  model             String
  temperature       Float
  stop              String
  top_p             Float
  frequency_penalty Float
  presence_penalty  Float
}

// banco bot whatssapp config
model BotWhatsappConfig {
  id         String   @id @default(uuid())
  user       User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    String
  name       String
}

// banco Empresa 
model Company {
  id                 String     @id @default(uuid())
  created_at         DateTime   @default(now())
  updated_at         DateTime   @updatedAt
  user_id            String
  name               String     @unique
  razao_social       String
  cnpj               String
  inscricao_estadual String
  area_atividade     String
  categoria_empresa  String
  descricao          String
  user               User       @relation(name: "UserCompany", references: [id], fields: [user_id], onDelete: Cascade)
  endereco           Endereco[]
  users              User[]
}

// banco Endereco
model Endereco {
  id         String   @id @default(uuid())
  empresa    Company  @relation(references: [id], fields: [empresa_id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  empresa_id String
  cep        String
  cidade     String
  estado     String
  rua        String
  numero     String
}

model Conversation {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  thread_id  String   @unique
  chat_id    String   @unique
}
